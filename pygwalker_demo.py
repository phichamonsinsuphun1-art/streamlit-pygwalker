import streamlit as st
import pandas as pd
import pygwalker as pyg
import numpy as np

st.set_page_config(page_title="PyGwalker Faceted Pattern", page_icon="üìä", layout="wide")

def create_sample_data():
    """Create sample dataset matching the exact pattern in the image"""
    
    # Exact categories from the image
    mfgid_list = ['QS0101', 'QSA101', 'QSA201', 'QSA301', 'QSA401', 'QSC201', 'QSC301', 'QSC401']
    suspension_types = ['NHK', 'PJCL', 'PJLE', 'myDa', 'PJLG', 'PJLI']
    dates = ['20231026', '20231106', '20231108', '20231112', '20231124', '20231128']
    testerids = ['RP48', 'RP49', 'RP50', 'RP51', 'RP52', 'RP53']
    
    # Generate scatter points
    data_list = []
    n_points = 1000
    
    for _ in range(n_points):
        date = np.random.choice(dates)
        tester = np.random.choice(testerids)
        
        data_list.append({
            'mfgid': np.random.choice(mfgid_list),
            'suspension_type': np.random.choice(suspension_types),
            'asmdate': date,
            'testerid': tester,
            'asmdate_testerid': f"{date}_{tester}",  # Combined for X-axis
            'value': np.random.uniform(0, 100),
            'count': 1  # Each point counts as 1
        })
    
    df = pd.DataFrame(data_list)
    return df

# Title
st.title("üìä PyGwalker - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á Pattern ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# Critical instructions
st.error("""
### ‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡πÉ‡∏ô PyGwalker ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:

‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤ pattern ‡∏Ñ‡∏∑‡∏≠:
- **‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô**: mfgid (QS0101, QSA101, ...)
- **‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢**: suspension_type (NHK, PJCL, ...)  
- **‡πÅ‡∏ô‡∏ß‡∏•‡πà‡∏≤‡∏á**: asmdate + testerid (hierarchical)
- **‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏î‡∏≥**: scatter plot
""")

st.success("""
### ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô PyGwalker:

**‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£:**
‡πÉ‡∏ô PyGwalker ‡∏°‡∏µ 2 ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏Å:
1. **Faceting** (‡πÅ‡∏¢‡∏Å panel) = ‡πÉ‡∏ä‡πâ Column/Row encoding
2. **Position** (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô chart) = ‡πÉ‡∏ä‡πâ X/Y encoding

**‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pattern ‡∏ô‡∏µ‡πâ:**

**Step 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Chart Type = Circle/Point**
- ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà Chart Type selector
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å **Circle** ‡∏´‡∏£‡∏∑‡∏≠ **Point**

**Step 2: Facet Columns (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)**
- ‡∏´‡∏≤ encoding channel ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ **"Column"** (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "Columns shelf")
- ‡∏•‡∏≤‡∏Å `mfgid` ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á
- ‡∏à‡∏∞‡πÑ‡∏î‡πâ facets ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô 8 ‡∏ä‡πà‡∏≠‡∏á

**Step 3: X-axis (‡πÅ‡∏Å‡∏ô‡∏•‡πà‡∏≤‡∏á)**
- ‡∏´‡∏≤ encoding ‡∏ä‡∏∑‡πà‡∏≠ **"X"** 
- ‡∏•‡∏≤‡∏Å `asmdate_testerid` ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á
- ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å `asmdate` ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° `testerid` ‡πÉ‡∏ô Detail

**Step 4: Y-axis (‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)**
- ‡∏´‡∏≤ encoding ‡∏ä‡∏∑‡πà‡∏≠ **"Y"**
- ‡∏•‡∏≤‡∏Å `suspension_type` ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á

**Step 5: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á**
- Opacity: ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
- Size: ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ `count`
""")

# Sidebar
with st.sidebar:
    st.header("üìÅ Data Source")
    
    option = st.radio("Choose:", ["Upload File", "Use Sample Data"])
    
    df = None
    
    if option == "Upload File":
        file = st.file_uploader("Upload CSV or Excel", type=['csv', 'xlsx', 'xls'])
        
        if file:
            try:
                if file.name.endswith('.csv'):
                    df = pd.read_csv(file)
                else:
                    df = pd.read_excel(file)
                
                st.success(f"‚úÖ {file.name}")
                st.info(f"üìä {len(df):,} rows √ó {len(df.columns)} cols")
                
            except Exception as e:
                st.error(f"‚ùå {e}")
    else:
        df = create_sample_data()
        st.success("‚úÖ Sample data loaded")
        st.info(f"üìä {len(df):,} rows √ó {len(df.columns)} cols")
    
    if df is not None:
        st.markdown("---")
        st.markdown("### üéØ Mapping for Pattern:")
        
        st.code("""
Facet Column ‚Üí mfgid
X-axis ‚Üí asmdate_testerid  
Y-axis ‚Üí suspension_type
Chart Type ‚Üí Circle/Point
        """)
        
        st.markdown("---")
        st.markdown("### üìä Available Fields:")
        
        for col in df.columns:
            unique = df[col].nunique()
            st.text(f"‚Ä¢ {col}: {unique} unique")

# Main area
if df is not None:
    
    with st.expander("üîç Preview Data"):
        st.dataframe(df.head(100), use_container_width=True)
    
    st.markdown("---")
    
    # Detailed guide
    st.warning("""
    ### üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
    
    **‡πÉ‡∏ô PyGwalker Interface ‡∏à‡∏∞‡∏°‡∏µ:**
    
    1. **Chart Type Selector** (‡∏°‡∏∏‡∏°‡∏ö‡∏ô)
       - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å **Circle** ‡∏´‡∏£‡∏∑‡∏≠ **Point** ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô!
    
    2. **Encoding Channels** (‡∏Ç‡∏ß‡∏≤‡∏°‡∏∑‡∏≠):
       - **Column** = Facet ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô ‚Üí ‡∏•‡∏≤‡∏Å `mfgid`
       - **Row** = Facet ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á ‚Üí ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
       - **X** = ‡πÅ‡∏Å‡∏ô‡∏•‡πà‡∏≤‡∏á ‚Üí ‡∏•‡∏≤‡∏Å `asmdate_testerid`
       - **Y** = ‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‚Üí ‡∏•‡∏≤‡∏Å `suspension_type`
       - **Color** = ‡∏™‡∏µ (optional)
       - **Size** = ‡∏Ç‡∏ô‡∏≤‡∏î (optional)
       - **Opacity** = ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (‡∏õ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠)
    
    3. **‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ "Rows" ‡∏´‡∏£‡∏∑‡∏≠ "Columns" Shelf ‡πÅ‡∏ö‡∏ö Tableau!**
       - PyGwalker ‡πÉ‡∏ä‡πâ encoding channels ‡∏ï‡∏£‡∏á‡πÜ
       - "Column" = facet horizontal
       - "Row" = facet vertical (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà hierarchical axis)
    
    **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hierarchical X-axis:**
    - ‡πÉ‡∏ô PyGwalker ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ nested axis ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    - ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ: ‡∏£‡∏ß‡∏° fields ‡πÄ‡∏õ‡πá‡∏ô `asmdate_testerid` (20231026_RP48)
    - ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ detail encoding ‡πÄ‡∏û‡∏∑‡πà‡∏≠ group data
    """)
    
    st.info("""
    ### üí° Tips ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
    
    **‡∏ñ‡πâ‡∏≤ Pattern ‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å:**
    
    1. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Chart Type**
       - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Circle/Point ‡∏Å‡πà‡∏≠‡∏ô!
       - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Bar ‡∏´‡∏£‡∏∑‡∏≠ Line
    
    2. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Encoding**
       - Column = mfgid (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö facet ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
       - X = asmdate_testerid (‡πÅ‡∏Å‡∏ô‡∏•‡πà‡∏≤‡∏á)
       - Y = suspension_type (‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)
    
    3. **Aggregation**
       - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô bar chart ‚Üí ‡∏°‡∏µ aggregation (SUM, COUNT)
       - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô scatter ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á aggregate, ‡πÉ‡∏ä‡πâ raw data
       - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ SUM() ‡∏´‡∏£‡∏∑‡∏≠ COUNT() wrap field
    
    4. **Data Type**
       - suspension_type ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô categorical (text)
       - asmdate_testerid ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô categorical
       - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô continuous ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö numeric axis
    
    5. **‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ "Detail" Encoding**
       - ‡∏•‡∏≤‡∏Å mfgid ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Column
       - ‡∏•‡∏≤‡∏Å asmdate ‡πÑ‡∏õ‡∏ó‡∏µ‡πà X
       - ‡∏•‡∏≤‡∏Å testerid ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Detail (‡∏à‡∏∞ group data)
       - ‡∏•‡∏≤‡∏Å suspension_type ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Y
    """)
    
    # Visualization
    st.markdown("---")
    st.subheader("üé® PyGwalker Interface")
    
    st.warning("üëá ‡∏•‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÉ‡∏ô interface ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ")
    
    try:
        pyg_html = pyg.to_html(df)
        st.components.v1.html(pyg_html, height=1200, scrolling=True)
        
    except Exception as e:
        st.error(f"Error: {e}")

else:
    st.info("üëà Upload file or use sample data!")
    
    st.markdown("""
    ### üéì ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á PyGwalker ‡∏Å‡∏±‡∏ö Tableau:
    
    **Tableau:**
    - ‡∏°‡∏µ Columns Shelf ‡πÅ‡∏•‡∏∞ Rows Shelf
    - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πâ‡∏≠‡∏ô fields ‡πÉ‡∏ô shelf ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ ‚Üí hierarchical axis
    - ‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ fields ‡πÄ‡∏Ç‡πâ‡∏≤ Rows = nested axis
    
    **PyGwalker:**
    - ‡πÉ‡∏ä‡πâ Encoding Channels (Column, Row, X, Y, Color, Size, ...)
    - Column/Row = ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö faceting (‡πÅ‡∏¢‡∏Å panel)
    - X/Y = ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô panel
    - ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö hierarchical axis ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    
    **‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ:**
    - ‡∏£‡∏ß‡∏° fields ‡∏Å‡πà‡∏≠‡∏ô: date_tester = "20231026_RP48"
    - ‡πÉ‡∏ä‡πâ Detail encoding ‡πÄ‡∏û‡∏∑‡πà‡∏≠ group
    - ‡πÉ‡∏ä‡πâ faceting ‡πÅ‡∏ó‡∏ô hierarchical axis
    """)

st.markdown("---")
st.caption("PyGwalker uses Grammar of Graphics encoding | Different from Tableau's shelf system")